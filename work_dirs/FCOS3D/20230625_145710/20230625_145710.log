2023/06/25 14:57:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.4 | packaged by conda-forge | (default, May 10 2021, 22:13:33) [GCC 9.3.0]
    CUDA available: True
    numpy_random_seed: 2033729721
    GPU 0: NVIDIA A10G
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.5, V11.5.119
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.1+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.4  (built against CUDA 11.6)
    - Built with CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2+cu117
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2033729721
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/25 14:57:12 - mmengine - INFO - Config:
dataset_type = 'NuScenesDataset'
data_root = '/home/efs/users/mateusz/data/nuscenes/'
class_names = [
    'car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle',
    'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
]
metainfo = dict(classes=[
    'car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle',
    'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
])
input_modality = dict(use_lidar=False, use_camera=True)
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFileMono3D', backend_args=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox=True,
        with_label=True,
        with_attr_label=True,
        with_bbox_3d=True,
        with_label_3d=True,
        with_bbox_depth=True),
    dict(type='mmdet.Resize', scale=(1600, 900), keep_ratio=True),
    dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
    dict(
        type='Pack3DDetInputs',
        keys=[
            'img', 'gt_bboxes', 'gt_bboxes_labels', 'attr_labels',
            'gt_bboxes_3d', 'gt_labels_3d', 'centers_2d', 'depths'
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFileMono3D', backend_args=None),
    dict(type='mmdet.Resize', scale_factor=1.0),
    dict(type='Pack3DDetInputs', keys=['img'])
]
train_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    dataset=dict(
        type='NuScenesDataset',
        data_root='/home/efs/users/mateusz/data/nuscenes/',
        data_prefix=dict(
            pts='',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT'),
        ann_file='small_nuscenes_infos_train.pkl',
        load_type='mv_image_based',
        pipeline=[
            dict(type='LoadImageFromFileMono3D', backend_args=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox=True,
                with_label=True,
                with_attr_label=True,
                with_bbox_3d=True,
                with_label_3d=True,
                with_bbox_depth=True),
            dict(type='mmdet.Resize', scale=(1600, 900), keep_ratio=True),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='Pack3DDetInputs',
                keys=[
                    'img', 'gt_bboxes', 'gt_bboxes_labels', 'attr_labels',
                    'gt_bboxes_3d', 'gt_labels_3d', 'centers_2d', 'depths'
                ])
        ],
        metainfo=dict(classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ]),
        modality=dict(use_lidar=False, use_camera=True),
        test_mode=False,
        box_type_3d='Camera',
        use_valid_flag=True,
        backend_args=None))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='NuScenesDataset',
        data_root='/home/efs/users/mateusz/data/nuscenes/',
        data_prefix=dict(
            pts='',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT'),
        ann_file='nuscenes_infos_val.pkl',
        load_type='mv_image_based',
        pipeline=[
            dict(type='LoadImageFromFileMono3D', backend_args=None),
            dict(type='mmdet.Resize', scale_factor=1.0),
            dict(type='Pack3DDetInputs', keys=['img'])
        ],
        modality=dict(use_lidar=False, use_camera=True),
        metainfo=dict(classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ]),
        test_mode=True,
        box_type_3d='Camera',
        use_valid_flag=True,
        backend_args=None))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='NuScenesDataset',
        data_root='/home/efs/users/mateusz/data/nuscenes/',
        data_prefix=dict(
            pts='',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT'),
        ann_file='nuscenes_infos_val.pkl',
        load_type='mv_image_based',
        pipeline=[
            dict(type='LoadImageFromFileMono3D', backend_args=None),
            dict(type='mmdet.Resize', scale_factor=1.0),
            dict(type='Pack3DDetInputs', keys=['img'])
        ],
        modality=dict(use_lidar=False, use_camera=True),
        metainfo=dict(classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ]),
        test_mode=True,
        box_type_3d='Camera',
        use_valid_flag=True,
        backend_args=None))
val_evaluator = dict(
    type='NuScenesMetric',
    data_root='/home/efs/users/mateusz/data/nuscenes/',
    ann_file='/home/efs/users/mateusz/data/nuscenes/nuscenes_infos_val.pkl',
    metric='bbox',
    backend_args=None)
test_evaluator = dict(
    type='NuScenesMetric',
    data_root='/home/efs/users/mateusz/data/nuscenes/',
    ann_file='/home/efs/users/mateusz/data/nuscenes/nuscenes_infos_val.pkl',
    metric='bbox',
    backend_args=None)
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='Det3DLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
model = dict(
    type='FCOSMono3D',
    data_preprocessor=dict(
        type='Det3DDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        bgr_to_rgb=False,
        pad_size_divisor=32),
    backbone=dict(
        type='mmdet.ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron2/resnet101_caffe'),
        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),
        stage_with_dcn=(False, False, True, True)),
    neck=dict(
        type='mmdet.FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='FCOSMono3DHead',
        num_classes=10,
        in_channels=256,
        stacked_convs=2,
        feat_channels=256,
        use_direction_classifier=True,
        diff_rad_by_sin=True,
        pred_attrs=True,
        pred_velo=True,
        dir_offset=0.7854,
        dir_limit_offset=0,
        strides=[8, 16, 32, 64, 128],
        group_reg_dims=(2, 1, 3, 1, 2),
        cls_branch=(256, ),
        reg_branch=((256, ), (256, ), (256, ), (256, ), ()),
        dir_branch=(256, ),
        attr_branch=(256, ),
        loss_cls=dict(
            type='mmdet.FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(
            type='mmdet.SmoothL1Loss',
            beta=0.1111111111111111,
            loss_weight=1.0),
        loss_dir=dict(
            type='mmdet.CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
        loss_attr=dict(
            type='mmdet.CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
        loss_centerness=dict(
            type='mmdet.CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        bbox_coder=dict(type='FCOS3DBBoxCoder', code_size=9),
        norm_on_bbox=True,
        centerness_on_reg=True,
        center_sampling=True,
        conv_bias=True,
        dcn_on_last_conv=True),
    train_cfg=dict(
        allowed_border=0,
        code_weight=[1.0, 1.0, 0.2, 1.0, 1.0, 1.0, 1.0, 0.05, 0.05],
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        use_rotate_nms=True,
        nms_across_levels=False,
        nms_pre=1000,
        nms_thr=0.8,
        score_thr=0.05,
        min_bbox_size=0,
        max_per_img=200))
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR',
        start_factor=0.3333333333333333,
        by_epoch=False,
        begin=0,
        end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001),
    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0),
    clip_grad=dict(max_norm=35, norm_type=2))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet3d'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=-1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='Det3DVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = None
resume = False
launcher = 'none'
work_dir = './work_dirs/FCOS3D'

2023/06/25 14:57:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/25 14:57:19 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/25 14:57:20 - mmengine - INFO - ------------------------------
2023/06/25 14:57:20 - mmengine - INFO - The length of the dataset: 438
2023/06/25 14:57:20 - mmengine - INFO - The number of instances per category in the dataset:
+----------------------+--------+
| category             | number |
+----------------------+--------+
| car                  | 2242   |
| truck                | 460    |
| trailer              | 12     |
| bus                  | 98     |
| construction_vehicle | 158    |
| bicycle              | 77     |
| motorcycle           | 70     |
| pedestrian           | 1674   |
| traffic_cone         | 1282   |
| barrier              | 1804   |
+----------------------+--------+
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.lateral_convs.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.lateral_convs.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.lateral_convs.1.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.lateral_convs.1.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.lateral_convs.2.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.lateral_convs.2.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.1.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.1.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.2.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.2.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.3.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.3.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.4.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- neck.fpn_convs.4.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls_prev.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls_prev.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls_prev.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_cls.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.0.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.0.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.0.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.1.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.1.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.1.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.2.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.2.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.2.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.3.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.3.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_reg_prevs.3.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.0.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.0.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.1.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.1.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.2.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.2.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.3.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.3.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.4.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_regs.4.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls_prev.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls_prev.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls_prev.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_dir_cls.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr_prev.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr_prev.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr_prev.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_attr.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness_prev.0.conv.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness_prev.0.conv.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness_prev.0.gn.bias:weight_decay=0.0
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness.bias:lr=0.004
2023/06/25 14:57:20 - mmengine - INFO - paramwise_options -- bbox_head.conv_centerness.bias:weight_decay=0.0
2023/06/25 14:57:21 - mmengine - INFO - ------------------------------
2023/06/25 14:57:21 - mmengine - INFO - The length of the dataset: 972
2023/06/25 14:57:21 - mmengine - INFO - The number of instances per category in the dataset:
+----------------------+--------+
| category             | number |
+----------------------+--------+
| car                  | 4543   |
| truck                | 321    |
| trailer              | 41     |
| bus                  | 166    |
| construction_vehicle | 0      |
| bicycle              | 91     |
| motorcycle           | 312    |
| pedestrian           | 2293   |
| traffic_cone         | 47     |
| barrier              | 720    |
+----------------------+--------+
2023/06/25 14:57:21 - mmengine - INFO - load model from: open-mmlab://detectron2/resnet101_caffe
2023/06/25 14:57:21 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://detectron2/resnet101_caffe
2023/06/25 14:57:22 - mmengine - WARNING - The model and loaded state dict do not match exactly

missing keys in source state_dict: layer3.0.conv2.conv_offset.weight, layer3.0.conv2.conv_offset.bias, layer3.1.conv2.conv_offset.weight, layer3.1.conv2.conv_offset.bias, layer3.2.conv2.conv_offset.weight, layer3.2.conv2.conv_offset.bias, layer3.3.conv2.conv_offset.weight, layer3.3.conv2.conv_offset.bias, layer3.4.conv2.conv_offset.weight, layer3.4.conv2.conv_offset.bias, layer3.5.conv2.conv_offset.weight, layer3.5.conv2.conv_offset.bias, layer3.6.conv2.conv_offset.weight, layer3.6.conv2.conv_offset.bias, layer3.7.conv2.conv_offset.weight, layer3.7.conv2.conv_offset.bias, layer3.8.conv2.conv_offset.weight, layer3.8.conv2.conv_offset.bias, layer3.9.conv2.conv_offset.weight, layer3.9.conv2.conv_offset.bias, layer3.10.conv2.conv_offset.weight, layer3.10.conv2.conv_offset.bias, layer3.11.conv2.conv_offset.weight, layer3.11.conv2.conv_offset.bias, layer3.12.conv2.conv_offset.weight, layer3.12.conv2.conv_offset.bias, layer3.13.conv2.conv_offset.weight, layer3.13.conv2.conv_offset.bias, layer3.14.conv2.conv_offset.weight, layer3.14.conv2.conv_offset.bias, layer3.15.conv2.conv_offset.weight, layer3.15.conv2.conv_offset.bias, layer3.16.conv2.conv_offset.weight, layer3.16.conv2.conv_offset.bias, layer3.17.conv2.conv_offset.weight, layer3.17.conv2.conv_offset.bias, layer3.18.conv2.conv_offset.weight, layer3.18.conv2.conv_offset.bias, layer3.19.conv2.conv_offset.weight, layer3.19.conv2.conv_offset.bias, layer3.20.conv2.conv_offset.weight, layer3.20.conv2.conv_offset.bias, layer3.21.conv2.conv_offset.weight, layer3.21.conv2.conv_offset.bias, layer3.22.conv2.conv_offset.weight, layer3.22.conv2.conv_offset.bias, layer4.0.conv2.conv_offset.weight, layer4.0.conv2.conv_offset.bias, layer4.1.conv2.conv_offset.weight, layer4.1.conv2.conv_offset.bias, layer4.2.conv2.conv_offset.weight, layer4.2.conv2.conv_offset.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.3.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.4.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.5.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.6.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.7.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.8.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.9.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.10.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.11.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.12.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.13.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.14.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.15.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.16.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.17.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.18.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.19.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.20.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.21.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.22.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer4.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer4.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer4.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet101_caffe 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.cls_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.1.conv.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.1.conv.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.reg_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.1.conv.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.1.conv.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_cls_prev.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_cls_prev.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_cls_prev.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_cls_prev.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_cls.weight - torch.Size([10, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_cls.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_reg_prevs.0.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_reg_prevs.0.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.0.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.0.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.1.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_reg_prevs.1.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.1.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.1.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.2.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_reg_prevs.2.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.2.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.2.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.3.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_reg_prevs.3.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.3.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_reg_prevs.3.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_regs.0.weight - torch.Size([2, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.0.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.1.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.2.weight - torch.Size([3, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.2.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.3.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.3.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.4.weight - torch.Size([2, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_regs.4.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_dir_cls_prev.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_dir_cls_prev.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_dir_cls_prev.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_dir_cls_prev.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_dir_cls.weight - torch.Size([2, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_dir_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_attr_prev.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_attr_prev.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_attr_prev.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_attr_prev.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_attr.weight - torch.Size([9, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_attr.bias - torch.Size([9]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_centerness_prev.0.conv.weight - torch.Size([64, 256, 3, 3]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_centerness_prev.0.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_centerness_prev.0.gn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_centerness_prev.0.gn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.conv_centerness.weight - torch.Size([1, 64, 1, 1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.conv_centerness.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCOSMono3DHead  

bbox_head.scales.0.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.0.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.0.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.1.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.1.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.1.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.2.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.2.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.2.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.3.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.3.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.3.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.4.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.4.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  

bbox_head.scales.4.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOSMono3D  
2023/06/25 14:57:22 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/25 14:57:22 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/25 14:57:22 - mmengine - INFO - Checkpoints will be saved to /home/efs/users/mateusz/Scene-Representation/work_dirs/FCOS3D.
2023/06/25 14:57:46 - mmengine - INFO - Epoch(train)  [1][ 50/438]  lr: 7.9760e-04  eta: 0:42:00  time: 0.4841  data_time: 0.0081  memory: 4172  grad_norm: 69.4401  loss: 12.1693  loss_cls: 0.9524  loss_offset: 1.3785  loss_depth: 3.2034  loss_size: 3.1112  loss_rotsin: 0.6148  loss_centerness: 0.6207  loss_velo: 0.0247  loss_dir: 0.6957  loss_attr: 1.5680
2023/06/25 14:58:04 - mmengine - INFO - Epoch(train)  [1][100/438]  lr: 9.3120e-04  eta: 0:36:01  time: 0.3542  data_time: 0.0063  memory: 4140  grad_norm: 66.7518  loss: 10.8772  loss_cls: 0.7596  loss_offset: 1.4260  loss_depth: 2.5314  loss_size: 2.9800  loss_rotsin: 0.5613  loss_centerness: 0.6039  loss_velo: 0.0289  loss_dir: 0.7208  loss_attr: 1.2652
2023/06/25 14:58:22 - mmengine - INFO - Epoch(train)  [1][150/438]  lr: 1.0648e-03  eta: 0:33:48  time: 0.3537  data_time: 0.0060  memory: 4109  grad_norm: 59.4219  loss: 11.5386  loss_cls: 0.7587  loss_offset: 1.4001  loss_depth: 3.3464  loss_size: 2.8352  loss_rotsin: 0.6330  loss_centerness: 0.6032  loss_velo: 0.0197  loss_dir: 0.7285  loss_attr: 1.2138
2023/06/25 14:58:39 - mmengine - INFO - Epoch(train)  [1][200/438]  lr: 1.1984e-03  eta: 0:32:35  time: 0.3548  data_time: 0.0063  memory: 4184  grad_norm: 53.3315  loss: 10.5983  loss_cls: 0.7522  loss_offset: 1.3910  loss_depth: 2.8012  loss_size: 2.6649  loss_rotsin: 0.5709  loss_centerness: 0.6048  loss_velo: 0.0195  loss_dir: 0.7103  loss_attr: 1.0836
2023/06/25 14:58:57 - mmengine - INFO - Epoch(train)  [1][250/438]  lr: 1.3320e-03  eta: 0:31:43  time: 0.3548  data_time: 0.0061  memory: 4193  grad_norm: 55.5521  loss: 10.4883  loss_cls: 1.0057  loss_offset: 1.3922  loss_depth: 2.4192  loss_size: 2.4888  loss_rotsin: 0.5548  loss_centerness: 0.5888  loss_velo: 0.0242  loss_dir: 0.6914  loss_attr: 1.3232
2023/06/25 14:59:15 - mmengine - INFO - Epoch(train)  [1][300/438]  lr: 1.4656e-03  eta: 0:31:03  time: 0.3544  data_time: 0.0062  memory: 4144  grad_norm: 48.8206  loss: 11.0674  loss_cls: 0.8244  loss_offset: 1.4039  loss_depth: 2.7975  loss_size: 2.8639  loss_rotsin: 0.5958  loss_centerness: 0.6022  loss_velo: 0.0219  loss_dir: 0.7157  loss_attr: 1.2420
2023/06/25 14:59:33 - mmengine - INFO - Epoch(train)  [1][350/438]  lr: 1.5992e-03  eta: 0:30:31  time: 0.3568  data_time: 0.0061  memory: 4188  grad_norm: 32.1071  loss: 11.6482  loss_cls: 0.8183  loss_offset: 1.4071  loss_depth: 3.4472  loss_size: 2.5818  loss_rotsin: 0.6216  loss_centerness: 0.6038  loss_velo: 0.0237  loss_dir: 0.7391  loss_attr: 1.4056
2023/06/25 14:59:50 - mmengine - INFO - Epoch(train)  [1][400/438]  lr: 1.7328e-03  eta: 0:30:00  time: 0.3542  data_time: 0.0059  memory: 4201  grad_norm: 39.7734  loss: 11.7160  loss_cls: 0.7908  loss_offset: 1.4009  loss_depth: 3.9715  loss_size: 2.3051  loss_rotsin: 0.5830  loss_centerness: 0.6050  loss_velo: 0.0219  loss_dir: 0.7137  loss_attr: 1.3241
2023/06/25 15:00:04 - mmengine - INFO - Exp name: FCOS3D_20230625_145710
2023/06/25 15:00:11 - mmengine - INFO - Epoch(val)  [1][ 50/972]    eta: 0:02:03  time: 0.1336  data_time: 0.0042  memory: 4096  
2023/06/25 15:00:16 - mmengine - INFO - Epoch(val)  [1][100/972]    eta: 0:01:44  time: 0.1058  data_time: 0.0022  memory: 789  
2023/06/25 15:00:21 - mmengine - INFO - Epoch(val)  [1][150/972]    eta: 0:01:34  time: 0.1061  data_time: 0.0023  memory: 789  
2023/06/25 15:00:27 - mmengine - INFO - Epoch(val)  [1][200/972]    eta: 0:01:27  time: 0.1059  data_time: 0.0023  memory: 789  
2023/06/25 15:00:32 - mmengine - INFO - Epoch(val)  [1][250/972]    eta: 0:01:20  time: 0.1058  data_time: 0.0023  memory: 789  
2023/06/25 15:00:37 - mmengine - INFO - Epoch(val)  [1][300/972]    eta: 0:01:14  time: 0.1060  data_time: 0.0023  memory: 789  
2023/06/25 15:00:42 - mmengine - INFO - Epoch(val)  [1][350/972]    eta: 0:01:08  time: 0.1062  data_time: 0.0023  memory: 789  
2023/06/25 15:00:48 - mmengine - INFO - Epoch(val)  [1][400/972]    eta: 0:01:02  time: 0.1062  data_time: 0.0023  memory: 789  
2023/06/25 15:00:53 - mmengine - INFO - Epoch(val)  [1][450/972]    eta: 0:00:56  time: 0.1071  data_time: 0.0025  memory: 789  
2023/06/25 15:00:58 - mmengine - INFO - Epoch(val)  [1][500/972]    eta: 0:00:51  time: 0.1061  data_time: 0.0023  memory: 789  
2023/06/25 15:01:04 - mmengine - INFO - Epoch(val)  [1][550/972]    eta: 0:00:45  time: 0.1062  data_time: 0.0022  memory: 789  
2023/06/25 15:01:09 - mmengine - INFO - Epoch(val)  [1][600/972]    eta: 0:00:40  time: 0.1059  data_time: 0.0022  memory: 789  
2023/06/25 15:01:14 - mmengine - INFO - Epoch(val)  [1][650/972]    eta: 0:00:34  time: 0.1060  data_time: 0.0021  memory: 789  
2023/06/25 15:01:20 - mmengine - INFO - Epoch(val)  [1][700/972]    eta: 0:00:29  time: 0.1061  data_time: 0.0021  memory: 789  
2023/06/25 15:01:25 - mmengine - INFO - Epoch(val)  [1][750/972]    eta: 0:00:23  time: 0.1059  data_time: 0.0021  memory: 789  
2023/06/25 15:01:30 - mmengine - INFO - Epoch(val)  [1][800/972]    eta: 0:00:18  time: 0.1058  data_time: 0.0023  memory: 789  
2023/06/25 15:01:36 - mmengine - INFO - Epoch(val)  [1][850/972]    eta: 0:00:13  time: 0.1058  data_time: 0.0023  memory: 789  
2023/06/25 15:01:41 - mmengine - INFO - Epoch(val)  [1][900/972]    eta: 0:00:07  time: 0.1057  data_time: 0.0023  memory: 789  
2023/06/25 15:01:46 - mmengine - INFO - Epoch(val)  [1][950/972]    eta: 0:00:02  time: 0.1056  data_time: 0.0022  memory: 789  
2023/06/25 15:02:10 - mmengine - INFO - Epoch(val) [1][972/972]    NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_4.0: 0.0003  NuScenes metric/pred_instances_3d_NuScenes/car_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mATE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mASE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mAOE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mAVE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mAAE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_orient_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/barrier_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/NDS: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/mAP: 0.0000  data_time: 0.0024  time: 0.1074
2023/06/25 15:02:28 - mmengine - INFO - Epoch(train)  [2][ 50/438]  lr: 1.9679e-03  eta: 0:29:14  time: 0.3555  data_time: 0.0064  memory: 4188  grad_norm: 35.9754  loss: 11.1328  loss_cls: 0.7367  loss_offset: 1.4338  loss_depth: 3.0284  loss_size: 2.7132  loss_rotsin: 0.5690  loss_centerness: 0.5999  loss_velo: 0.0185  loss_dir: 0.7108  loss_attr: 1.3225
2023/06/25 15:02:45 - mmengine - INFO - Epoch(train)  [2][100/438]  lr: 2.0000e-03  eta: 0:28:50  time: 0.3549  data_time: 0.0058  memory: 4184  grad_norm: 78.0225  loss: 13.0551  loss_cls: 0.7550  loss_offset: 1.3999  loss_depth: 5.2831  loss_size: 2.5622  loss_rotsin: 0.5724  loss_centerness: 0.6031  loss_velo: 0.0218  loss_dir: 0.7142  loss_attr: 1.1434
2023/06/25 15:03:03 - mmengine - INFO - Epoch(train)  [2][150/438]  lr: 2.0000e-03  eta: 0:28:27  time: 0.3549  data_time: 0.0058  memory: 4139  grad_norm: 25.7101  loss: 11.2330  loss_cls: 0.7946  loss_offset: 1.4224  loss_depth: 3.4006  loss_size: 2.5381  loss_rotsin: 0.5668  loss_centerness: 0.6042  loss_velo: 0.0270  loss_dir: 0.7011  loss_attr: 1.1780
2023/06/25 15:03:21 - mmengine - INFO - Epoch(train)  [2][200/438]  lr: 2.0000e-03  eta: 0:28:05  time: 0.3558  data_time: 0.0059  memory: 4201  grad_norm: 40.5748  loss: 11.4856  loss_cls: 0.8079  loss_offset: 1.4057  loss_depth: 3.6184  loss_size: 2.4557  loss_rotsin: 0.5862  loss_centerness: 0.6039  loss_velo: 0.0284  loss_dir: 0.6917  loss_attr: 1.2876
2023/06/25 15:03:39 - mmengine - INFO - Epoch(train)  [2][250/438]  lr: 2.0000e-03  eta: 0:27:43  time: 0.3547  data_time: 0.0059  memory: 4179  grad_norm: 22.2635  loss: 10.9661  loss_cls: 0.7349  loss_offset: 1.3925  loss_depth: 3.3788  loss_size: 2.2940  loss_rotsin: 0.5627  loss_centerness: 0.6053  loss_velo: 0.0219  loss_dir: 0.7652  loss_attr: 1.2107
2023/06/25 15:03:56 - mmengine - INFO - Epoch(train)  [2][300/438]  lr: 2.0000e-03  eta: 0:27:22  time: 0.3542  data_time: 0.0059  memory: 4188  grad_norm: 25.2360  loss: 10.1279  loss_cls: 0.7404  loss_offset: 1.4006  loss_depth: 2.4441  loss_size: 2.6121  loss_rotsin: 0.5738  loss_centerness: 0.6017  loss_velo: 0.0229  loss_dir: 0.6880  loss_attr: 1.0443
2023/06/25 15:04:14 - mmengine - INFO - Epoch(train)  [2][350/438]  lr: 2.0000e-03  eta: 0:27:03  time: 0.3588  data_time: 0.0058  memory: 4170  grad_norm: 29.9505  loss: 10.4411  loss_cls: 0.9568  loss_offset: 1.3739  loss_depth: 2.7268  loss_size: 2.4148  loss_rotsin: 0.5680  loss_centerness: 0.5911  loss_velo: 0.0250  loss_dir: 0.6699  loss_attr: 1.1147
2023/06/25 15:04:32 - mmengine - INFO - Epoch(train)  [2][400/438]  lr: 2.0000e-03  eta: 0:26:42  time: 0.3559  data_time: 0.0059  memory: 4192  grad_norm: 26.4201  loss: 10.0659  loss_cls: 0.9675  loss_offset: 1.3849  loss_depth: 2.5242  loss_size: 2.3530  loss_rotsin: 0.5731  loss_centerness: 0.5872  loss_velo: 0.0168  loss_dir: 0.6835  loss_attr: 0.9756
2023/06/25 15:04:45 - mmengine - INFO - Exp name: FCOS3D_20230625_145710
2023/06/25 15:04:51 - mmengine - INFO - Epoch(val)  [2][ 50/972]    eta: 0:01:38  time: 0.1064  data_time: 0.0027  memory: 4104  
2023/06/25 15:04:56 - mmengine - INFO - Epoch(val)  [2][100/972]    eta: 0:01:32  time: 0.1059  data_time: 0.0024  memory: 789  
2023/06/25 15:05:01 - mmengine - INFO - Epoch(val)  [2][150/972]    eta: 0:01:27  time: 0.1061  data_time: 0.0025  memory: 789  
2023/06/25 15:05:07 - mmengine - INFO - Epoch(val)  [2][200/972]    eta: 0:01:21  time: 0.1061  data_time: 0.0025  memory: 789  
2023/06/25 15:05:12 - mmengine - INFO - Epoch(val)  [2][250/972]    eta: 0:01:16  time: 0.1065  data_time: 0.0025  memory: 789  
2023/06/25 15:05:17 - mmengine - INFO - Epoch(val)  [2][300/972]    eta: 0:01:11  time: 0.1062  data_time: 0.0025  memory: 789  
2023/06/25 15:05:23 - mmengine - INFO - Epoch(val)  [2][350/972]    eta: 0:01:06  time: 0.1059  data_time: 0.0025  memory: 789  
2023/06/25 15:05:28 - mmengine - INFO - Epoch(val)  [2][400/972]    eta: 0:01:00  time: 0.1060  data_time: 0.0025  memory: 789  
2023/06/25 15:05:33 - mmengine - INFO - Epoch(val)  [2][450/972]    eta: 0:00:55  time: 0.1061  data_time: 0.0025  memory: 789  
2023/06/25 15:05:39 - mmengine - INFO - Epoch(val)  [2][500/972]    eta: 0:00:50  time: 0.1059  data_time: 0.0024  memory: 789  
2023/06/25 15:05:44 - mmengine - INFO - Epoch(val)  [2][550/972]    eta: 0:00:44  time: 0.1062  data_time: 0.0022  memory: 789  
2023/06/25 15:05:49 - mmengine - INFO - Epoch(val)  [2][600/972]    eta: 0:00:39  time: 0.1061  data_time: 0.0024  memory: 789  
2023/06/25 15:05:54 - mmengine - INFO - Epoch(val)  [2][650/972]    eta: 0:00:34  time: 0.1059  data_time: 0.0023  memory: 789  
2023/06/25 15:06:00 - mmengine - INFO - Epoch(val)  [2][700/972]    eta: 0:00:28  time: 0.1061  data_time: 0.0022  memory: 789  
2023/06/25 15:06:05 - mmengine - INFO - Epoch(val)  [2][750/972]    eta: 0:00:23  time: 0.1056  data_time: 0.0022  memory: 789  
2023/06/25 15:06:10 - mmengine - INFO - Epoch(val)  [2][800/972]    eta: 0:00:18  time: 0.1059  data_time: 0.0023  memory: 789  
2023/06/25 15:06:16 - mmengine - INFO - Epoch(val)  [2][850/972]    eta: 0:00:12  time: 0.1059  data_time: 0.0023  memory: 789  
2023/06/25 15:06:21 - mmengine - INFO - Epoch(val)  [2][900/972]    eta: 0:00:07  time: 0.1060  data_time: 0.0024  memory: 789  
2023/06/25 15:06:26 - mmengine - INFO - Epoch(val)  [2][950/972]    eta: 0:00:02  time: 0.1063  data_time: 0.0024  memory: 789  
2023/06/25 15:07:45 - mmengine - INFO - Epoch(val) [2][972/972]    NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/car_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/car_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mATE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mASE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mAOE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mAVE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/mAAE: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/truck_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/trailer_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bus_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/bicycle_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_vel_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_attr_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_orient_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_0.5: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_1.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_2.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_4.0: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_trans_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_scale_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_orient_err: 1.0000  NuScenes metric/pred_instances_3d_NuScenes/barrier_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/barrier_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/NDS: 0.0000  NuScenes metric/pred_instances_3d_NuScenes/mAP: 0.0000  data_time: 0.0024  time: 0.1061
2023/06/25 15:08:03 - mmengine - INFO - Epoch(train)  [3][ 50/438]  lr: 2.0000e-03  eta: 0:26:07  time: 0.3542  data_time: 0.0061  memory: 4104  grad_norm: 16.6475  loss: 11.2026  loss_cls: 0.7658  loss_offset: 1.4214  loss_depth: 4.0774  loss_size: 2.0119  loss_rotsin: 0.5925  loss_centerness: 0.6015  loss_velo: 0.0315  loss_dir: 0.7332  loss_attr: 0.9674
